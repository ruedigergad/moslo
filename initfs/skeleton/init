#!/bin/sh
#
# Init script for MOSLO (MeeGo OS LOader)
#
# Copyright (C) 2010-2011 Nokia Corporation.
# Authors:
#          Peter Antoniac <peter.antoniac@nokia.com>
#          Timo Kokkonen <timo.t.kokkonen@nokia.com>
#          Janne Lääkkö <janne.laakko@nokia.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.

INIT_OPTS=
MMC_DEV="/dev/mmcblk0"
ALT_OS_PART="$MMC_DEV"p4
IP_ARRD="192.168.2.15"
# Text2screen wrapper for next lines
TTSYI=0 # Where to start
TTSX=0
TTSY=TTSYI
TTS_PIX_PER_CHAR=9
TTS_SCALE=2
TTSYM=480 # Max y lines
TTSXM=830 # Max x lines
TTSCM=$(($TTSXM/($TTS_PIX_PER_CHAR*$TTS_SCALE))) # Max char/line
TTSI=$(((TTS_PIX_PER_CHAR+1)*TTS_SCALE))

ttsr()
{
        TTSY=$TTSYI
        fb_text2screen -c -B000
}

tts()
{
        fb_text2screen -s $TTS_SCALE -y $TTSY -t "$1"
        echo $1
        let "LINES=1+${#1}/$TTSCM"
        let "TTSY+=($TTSI*$LINES)"
        if [ $TTSY -gt $TTSYM ] ; then ttsr ; fi
}

tts_dot_wait(){
        TTSX=0
        for i in 5 4 3 2 1 0; do
                fb_text2screen -s $TTS_SCALE -y $TTSY -x $TTSX -t "$i "
                echo -n "$i "
                let "TTSX+=30"
                sleep 1
        done
        let "LINES=1+6/$TTSCM"
        let "TTSY+=($TTSI*$LINES)"
        if [ $TTSY -gt $TTSYM ] ; then ttsr ; fi
}

shell()
{
        echo "Starting shell..."
        getty 115200 ttyS0 -n -l /bin/sh &
        while : ; do
          if [ -n "$WD_DEVICE" ]; then
            echo "30" >&3
          fi
          sleep 2
        done
}

reboot_to_harmattan()
{
        [ $# -ge 1 ] && TIMEOUT=$1 || TIMEOUT=0;
        tts "Booting to Harmattan in $TIMEOUT seconds"
        sleep $TIMEOUT
        reboot2 s
}

trap_func()
{
        tts "Trap!"
        reboot_to_harmattan
}

usb_is_plugged()
{
        # type is USB_DCP with wall charger, USB otherwise (including disconnected)
        if [ "$(cat /sys/class/power_supply/usb/type)" == "USB" ]; then
            usb=$(cat /sys/class/power_supply/usb/present)
            return $usb
        else
            return 0
        fi
}

wait_mmc()
{
        TRY=0
        tts "Waiting for eMMC device..."
        while [ ! -e "$MMC_DEV" -a $TRY -lt 10 ] ; do
            sleep 1
            TRY=$(($TRY+1))
        done
        if [ $TRY == 10 ]; then
                tts "eMMC device not found!"
        fi
}

export_over_usb()
{
        [ -e "$1" ] && {
            umount "$1"
            EXPORT_FILE="$1"
        }
        rmmod g_nokia
        MP_ERR=1
        TRY=0
        while [ "$MP_ERR" -ne "0" -a $TRY -lt 10 ] ; do
                modprobe g_multi ${EXPORT_FILE:+file=$EXPORT_FILE} \
                        stall=0 removable=1 nofua=1
                # check that the module really is loaded
                lsmod |grep -q g_multi
                MP_ERR=$?
                TRY=$(($TRY+1))
                #tts "Try $TRY ($MP_ERR)"
        done
        if [ $TRY == 10 ]; then
                tts "Unable to load the USB modules!"
        else
                [ -n "$EXPORT_FILE" ] && \
                    tts "Rootfs of AlternateOS now exported via USB"
                ifconfig usb0 $IP_ARRD up
                [ $? -eq 0 ] && \
                    tts "You can telnet into $IP_ARRD" || \
                    tts "Setting IP address failed!"
        fi

        sleep 1
        usb_is_plugged
        while [ $? -eq 1 ] ; do
                sleep 1
                usb_is_plugged
        done
}

trap "trap_func" 0 2

echo "START SYSTEM"

# exit immediately if a command fails
#set -e

export PATH=/sbin:/bin:/usr/bin:/usr/sbin
export MOUNT_DIR=/mnt

echo -n "Doing mounts... "
mount /dev
mkdir /dev/pts
mount -a
cat /proc/mounts > /etc/mtab

# Get the device specific configs
if [ -f /moslo.config ]; then
  source /moslo.config
fi

# If there is Watch dog device set then kick it
if [ -n "$WD_DEVICE" ]; then
  # Kick the watch dog
  exec 3>$WD_DEVICE
  echo "30" >&3
fi

# adjust kernel to minimize memory consumption,
# flushing of memory card buffers
# and optimize IO pressure

#TODO fix pty/max and dirty ratio in kernel configuration
echo 256 > /proc/sys/kernel/threads-max || \
  tts "Set fail for kernel thread-max"
echo 8192 > /proc/sys/fs/file-max || \
  tts "Set fail for kernel file-max"
echo 1 > /proc/sys/vm/swappiness || \
  tts "Set fail for swappiness"
echo 5 > /proc/sys/vm/page-cluster || \
  tts "Set fail for page-cluster"
echo 500 > /proc/sys/vm/dirty_expire_centisecs || \
  tts "Set fail for expire_centisecs"
echo 60 > /proc/sys/vm/dirty_background_ratio || \
  tts "Set fail for dirty_background_ratio"
echo 65536 > /proc/sys/net/core/rmem_default || \
  tts "Set fail for rmem_default"
echo 16384 > /proc/sys/net/core/wmem_default || \
  tts "Set fail for wmem_default"

#Run mdev
mdev -s

#Set mdev as hotplug manager
echo /bin/mdev > /proc/sys/kernel/hotplug

syslogd &

/sbin/init_preps.sh

# Start telnetd service
telnetd -l/bin/sh

# Start shell for console use
shell &

# Clear screen and display welcome message
ttsr
VERSION=$(cat /etc/moslo-version)
tts " Welcome to MOSLO v$VERSION"
tts "    check wiki.merproject.org/wiki/Nemo"
tts ""

# Wait for one second for eMMC to settle
wait_mmc

usb_is_plugged
if [ $? -eq 1 ]; then
    if [ ! -b "$ALT_OS_PART" ]; then
        tts "Repartitioning MMC for AlternateOS."
        tts "Do not unplug USB or poweroff the device!!!"
        autopartition.sh create $MMC_DEV > /var/log/repartition.log
        case $? in
            0)
                tts "Re-partitioning successful!"
                ;;
            1)
                tts "ERR: Re-partitioning failed! No partition created."
                ;;
            *)
                tts "FATAL: Re-partitioning failed! You might be in trouble!"
                tts "You can telnet in the device to try to debug!"
                ;;
        esac
    fi

    # Export AlternateOS partition via USB
    export_over_usb "$ALT_OS_PART"
fi

mount $ALT_OS_PART $MOUNT_DIR
if [ $? -ne 0 ]; then
        tts "Mounting AlternateOS failed. Not able to boot that."
        reboot_to_harmattan 5
fi

# Try to load AlternateOS kernel
kexec_load $MOUNT_DIR

if [ $? -eq 0 ]; then
        tts "Found AlternateOS kernel."
        tts "Autoboot to AlternateOS in 15 seconds"
        tts ""
        tts "Press: VolumeUp button to boot to Harmattan"
        tts "       VolumeDown button to boot to AlternateOS."
        # Check if keycode 115 is emitted
        evkey -u -t 15000 /dev/input/event4 | grep -q -w 115
        if [ $? -eq 0 ]; then
                reboot_to_harmattan 0
        else
                # Set disable PM features and set cpu clock to resemble POR
                disable_pm
                kexec -e
                tts "kexec failed: $?"
                tts "Failed to boot /boot/bzImage"
        fi
else
        tts "Unable to load AlternateOS kernel."
fi

reboot_to_harmattan 5

# exit would trap and start a new shell again, so stay in the loop
# forever
while true; do
        sleep 99999
done
